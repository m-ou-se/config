#!/bin/bash

cd $(dirname "$0")
config_dir="${PWD##$HOME/}"

SET_SHELL=ask
INSTALL_VIM_PLUGINS=1

for arg in "$@"; do
	case "$arg" in
		--keep-shell) SET_SHELL="no";;
		--set-shell) SET_SHELL="yes";;
		--skip-vim-plugins) INSTALL_VIM_PLUGINS=0;;
		*)
			printf "Unrecognized option/argument: %s\n" "$arg" >&2
			exit 1
	esac
done

# Check if the config_dir is relative to $HOME or not.
config_dir_prefix=""
[ "$config_dir" != "$PWD" ] && config_dir_prefix="../"

check_commands() {
	local missing=0
	for tool in "$@"; do
		if ! command -v "$tool" > /dev/null; then
			echo "$tool missing."
			missing=1
		fi
	done
	return $missing
}

config_backup_dir="backup-$(date +%F-%H-%M-%S)";

install_file() {
	if [ -e "$HOME/$2" ]; then
		if [ "$(readlink "$HOME/$2")" != ".config/config_dir/$1" ]; then
			mkdir -p "$config_backup_dir"
			mv "$HOME/$2" "$config_backup_dir/$2"
			echo "'$2' already exists. It is moved to '$config_dir/$config_backup_dir/$2'." 1>&2
		else
			return
		fi
	fi
	ln -s ".config/config_dir/$1" "$HOME/$2"
}

install_config_dir_symlink() {
	if [[ -e "$HOME/.config/$1" || -L "$HOME/.config/$1" ]]; then
		readlink "$HOME/.config/$1"
		if [ "$(readlink "$HOME/.config/$1")" != "config_dir/$1" ]; then
			mkdir -p "$config_backup_dir"
			mv "$HOME/.config/$1" "$config_backup_dir/$1"
			echo "'$1' already exists. It is moved to '$config_dir/$config_backup_dir/$1'." 1>&2
		else
			return
		fi
	fi
	mkdir -p "$HOME/.config"
	ln -s "config_dir/$1" "$HOME/.config/$1"
}

ask() {
	read -n 1 -r -p "$1 (y/N)"
	echo
	[[ $REPLY = "Y" || $REPLY = "y" ]]
}

if command -v nvim > /dev/null; then
	vim=nvim
else
	vim=vim
fi

# Check for required tools.
required_commands=( git "$vim" )
if ! check_commands "${required_commands[@]}"; then
	exit 1
fi

# Make a symlink to the config dir at $HOME/.config/config_dir
if [ ! -e "$HOME/.config" ]; then
	mkdir "$HOME/.config"
elif [ ! -d "$HOME/.config" ]; then
	echo "$HOME/.config exists and is not a directory." 1>&2
	exit 1
fi

if [ ! -e "$HOME/.config/nvim" ]; then
	ln -s config_dir/vim "$HOME/.config/nvim"
elif [ "$(readlink "$HOME/.config/nvim")" != "config_dir/vim" ]; then
	echo "$HOME/.config/nvim exists but is not a symlink to config_dir/vim" 1>&2
	exit 1
fi

if [ ! -e "$HOME/.config/config_dir" ]; then
	ln -s "$config_dir_prefix$config_dir" "$HOME/.config/config_dir"
elif [ "$(readlink "$HOME/.config/config_dir")" != "$config_dir_prefix$config_dir" ]; then
	echo "$HOME/.config/config_dir exists but is not the correct symlink. Please move or remove it." 1>&2
	exit 1
fi

# Throw away old .zprofile that we used to ship.
if [ "$(readlink "$HOME/.zprofile")" == "$config_dir/zprofile" ]; then
	rm "$HOME/.zprofile"
fi

# Install configuration files.
install_file vim/init.vim .vimrc
for file in bash_profile bashrc gitconfig profile screenrc zshrc vim zshenv Xresources tmux.conf
do
	install_file "$file" ".$file"
done

install_config_dir_symlink alacritty

# Install minpac.
if [ ! -d "vim/pack/minpac/opt/minpac" ]; then
	git clone --depth 1 https://github.com/k-takata/minpac "vim/pack/minpac/opt/minpac"
else
	git -C "vim/pack/minpac/opt/minpac" pull
fi

if (( INSTALL_VIM_PLUGINS )); then
	echo "Installing vim plugins" >&2
	$vim -es -c "autocmd vimenter * echo 'Cleaning vim plugins.' | PackClean | echo 'Installing vim plugins.' | call minpac#update('', {'do': 'qall'})"

	echo "Installing vim-coc extensions" >&2
	coc_extensions=(
		coc-calc
		coc-clangd
		coc-cmake
		coc-css
		coc-html
		coc-json
		coc-lists
		coc-pywrite
		coc-rust-analyzer
		coc-snippets
		coc-xml
		coc-yaml
		coc-yank
	)
	$vim -es -c "autocmd vimenter * echo 'Installing vim-coc extensions.' | CocInstall -sync ${coc_extensions[*]} | qall"
fi

# Install zsh-syntax-highlighting.
if [ ! -d "zsh-syntax-highlighting" ]; then
	git clone https://github.com/zsh-users/zsh-syntax-highlighting
fi

if [[ "$SET_SHELL" != "no" ]]; then
	shell=$(getent passwd $LOGNAME | cut -d: -f7)
	case "$shell" in
		*/zsh) ;;
		*)
			zshell=$(grep '/zsh$' /etc/shells | head -n1)
			if [ -n "$zshell" ]; then
				if [[ "$SET_SHELL" == "ask" ]] && ask "Change shell to zsh?"; then
					chsh -s "$zshell"
				elif [[ "$SET_SHELL" == "yes" ]]; then
					chsh -s "$zshell"
				fi
			fi
			;;
	esac
fi

if ! command -v rg > /dev/null; then
	echo "Consider installing ripgrep"
fi

if ! command -v fzf > /dev/null; then
	echo "Consider installing fzf (fuzzy finding in zsh, bash, vim, etc.)"
fi

if ! command -v diff-so-fancy > /dev/null; then
	echo "Consider installing diff-so-fancy (prettier diff/patch outputs in git)"
fi

if ! command -v exa > /dev/null; then
	echo "Consider installing exa (a better ls)"
fi
